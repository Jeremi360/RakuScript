# Grammar Syntax
# ---------------
#
# *    0 or more
# +    1 or more
# ?    0 or 1
# .    any char
# ()   group
# []   one of char
# ""   literal char
# -    char range
# |    or              Only applies to adjacent symbols. E.g.
#                      "a" | "b" "c"  reads as ("a" | "b") "c"
#                      Multi_line or's are by line. E.g.
#                      "a"
#                      | "b" "c"
#                      reads as "a" | ("b" "c")
#
# Todo
# ----
#
# - assign operators
# - function definition statements
# - function call named arguments
# - pass stmt
# - atoms, true false


rakuscript          ::= stmt+

block               ::= stmt
                      | newline indent stmt+ dedent

stmt                ::= comment
                      | while | for | if
                      | gd
                      | fn_call_stmt


gd                  ::= "gd:" gd_block


while               ::= "while" logic_expr ":" block
for                 ::= "for" ident "in" expr ":" block

if                  ::= "if" logic_expr ":" block elif? else?
elif                ::= "elif" logic_expr ":" block elif?
else                ::= "else" ":" block


expr                ::= number
                      | string
                      | array
                      | dict
                      | logic_expr
                      | math_expr
                      | fn_call


fn_call             ::= ident "(" (expr ","?)* ")"
fn_call_stmt        ::= fn_call
                      | ident (expr ","?)*


array               ::= "[" (expr ","?)* "]"

dict                ::= "{" (dict_item ","?)* "}"
dict_item           ::= expr ":" expr
                      | ident "=" expr

# Referenced: https://docs.python.org/3/reference/grammar.html

logic_expr          ::= logic_or
logic_or            ::= logic_and ("or" | "||" logic_and)*
logic_and           ::= logic_not ("and" | "&&" logic_not)*
logic_not           ::= ("not" | "!") logic_not | cmp

cmp                 ::= expr (cmp_op expr)*
cmp_op              ::= "==" | ">" | ">=" | "<" | "<=" | "!="

math_expr           ::= math_term ("+" | "_" math_term)*
math_term           ::= math_factor ("*" | "/" | "%" math_factor)*
math_factor         ::= ("+" | "_") math_factor | expr


str                 ::= sq_str | dq_str
sq_str              ::= "'" .* "'"
dq_str              ::= '"' .* '"'

comment             ::= "#" .*
number              ::= digit+ ( "." digit+ )?
digit               ::= [ "0" - "9" ]

ident               ::= EXTERNAL
indent              ::= EXTERNAL
dedent              ::= EXTERNAL
gd_block            ::= EXTERNAL
