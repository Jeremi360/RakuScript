// Grammar Syntax
// ---------------
//
// *    0 or more
// +    1 or more
// ?    0 or 1
// .    any char
// ()   group
// []   one of char
// ""   literal char
// -    char range
// |    or              Only applies to adjacent symbols. E.g.
//                      "a" | "b" "c"  reads as ("a" | "b") "c"
//                      Multi-line or's are by line. E.g.
//                      "a"
//                      | "b" "c"
//                      reads as "a" | ("b" "c")


rakuscript          ::= statement+

statement           ::= definition
                      | comment

block               ::= statement | newline indent statement+ dedent

gdscript            ::= "gd:" gdscript-block

change-var          ::= var-name " "? "=" expression

var-name            ::= alpha digit?

comment             ::= "#" .*

while               ::= "while" ("(")?  logic-expression (")")? ":" block

if                  ::= "if" ("(")? logic-expression ")" (")")? ":" block
                            else-if? else?

else-if             ::= "elif" ("(")? logic-expression ")" ":" block else-if?

else                ::= "else" ("(")? ":" block


expression          ::= number
                      | string
                      | array
                      | dictionary
                      | logic-expression
                      | math-expression


array               ::= "[" any-ws ( expression ( any-ws "," any-ws expression? )? )* "]"

dictionary          ::= "{" any-ws (dictionary-item* ( any-ws "," any-ws dictionary-item? )? )* "}"

dictionary-item     ::= (expression " "* ":" " "* expression)
                      | change-var


// Referenced: https://docs.python.org/3/reference/grammar.html

logic-expression    ::= logic_or

logic_or            ::= logic_and ("or" | "||" logic_and)*

logic_and           ::= logic_not ("and" | "&&" logic_not)*

logic_not           ::= ("not" | "!") logic_not | comparison

comparison          ::= expression (comparison-op expression)*

comparison-op       ::= "==" | ">" | ">=" | "<" | "<=" | "!="


math-expression     ::= math-term ("+" | "-" math-term)*

math-term           ::= math-factor ("*" | "/" | "%" math-factor)*

math-factor         ::= ("+" | "-") math-factor | expression


number              ::= digit+ ( "." digit+ )?

alphanumeric        ::= alpha | digit

digit               ::= [ "0" - "9" ]

alpha               ::= [ "A" - "Z" "a" - "z" "_" ]

any-ws              ::= [ " " tab newline ]*

tab                 ::= \t

newline             ::= \n

indent              ::= EXTERNAL

dedent              ::= EXTERNAL

gdscript-block      ::= EXTERNAL
