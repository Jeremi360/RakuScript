// Grammar Syntax
// ---------------
//
// *    0 or more
// +    1 or more
// ?    0 or 1
// .    any char
// ()   group
// []   one of char
// ""   literal char
// -    char range
// |    or              Only applies to adjacent symbols. E.g.
//                      "a" | "b" "c"  reads as ("a" | "b") "c"
//                      Multi-line or's are by line. E.g.
//                      "a"
//                      | "b" "c"
//                      reads as "a" | ("b" "c")
//
// Todo
// ----
//
// - Add assign operators.
// - Add function definition statements.
// - Add function call named arguments.


rakuscript          ::= statement+

block               ::= statement
                      | newline indent statement+ dedent

statement           ::= comment
                      | while | for | if
                      | gdscript
                      | func-call-statement

gdscript            ::= "gd:" gdscript-block


while               ::= "while" logic-expression ":" block

for                 ::= "for" identifier "in" expression ":" block

if                  ::= "if" logic-expression ":" block elif? else?

elif                 ::= "elif" logic-expression ":" block elif?

else                ::= "else" ":" block


expression          ::= number
                      | string
                      | array
                      | dictionary
                      | logic-expression
                      | math-expression
                      | func-call


func-call           ::= identifier "(" (expression ","?)* ")"

func-call-stmt      ::= func-call
                      | identifier (expression ","?)*


array               ::= "[" (expression ","?)* "]"

dictionary          ::= "{" (dictionary-item ","?)* "}"

dictionary-item     ::= expression ":" expression
                      | identifier "=" expression

// Referenced: https://docs.python.org/3/reference/grammar.html

logic-expression    ::= logic_or

logic_or            ::= logic_and ("or" | "||" logic_and)*

logic_and           ::= logic_not ("and" | "&&" logic_not)*

logic_not           ::= ("not" | "!") logic_not | comparison

comparison          ::= expression (comparison-op expression)*

comparison-op       ::= "==" | ">" | ">=" | "<" | "<=" | "!="


math-expression     ::= math-term ("+" | "-" math-term)*

math-term           ::= math-factor ("*" | "/" | "%" math-factor)*

math-factor         ::= ("+" | "-") math-factor | expression


string              ::= single-quote-string | double-quote-string
single-quote-string ::= "'" .* "'"
double-quote-string ::= '"' .* '"'


comment             ::= "#" .*

number              ::= digit+ ( "." digit+ )?

digit               ::= [ "0" - "9" ]


identifier          ::= EXTERNAL

indent              ::= EXTERNAL

dedent              ::= EXTERNAL

gdscript-block      ::= EXTERNAL
